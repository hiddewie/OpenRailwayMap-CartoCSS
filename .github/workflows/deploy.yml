name: Deploy

on:
  workflow_dispatch: ~

jobs:
  deploy-proxy:
    name: Deploy proxy
    runs-on: ubuntu-latest
    environment: proxy-production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --config proxy.fly.toml --local-only

#  generate-tiles:
#    name: Generate tiles
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        tiles:
#          - low-med
#          - standard
#          - speed
#          - signals
#          - electrification
#          - gauge
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Pull database
#        run: |
#          docker compose pull db
#          docker compose up --no-build --pull never --wait db
#
#      - name: Generate tiles
#        env:
#          TILES: ${{ matrix.tiles }}
#          BBOX: '-11.3818,35.8891,25.0488,57.3976'
#        run: |
#          docker compose run martin-cp
#          ls -las tiles/
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: tiles-${{ matrix.tiles }}
#          path: |
#            tiles/*.mbtiles
#          if-no-files-found: error
#          retention-days: 3
#
#  deploy-tiles:
#    name: Deploy tiles
#    runs-on: ubuntu-latest
#    needs: generate-tiles
#    environment: tiles-production
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Setup Fly
#        uses: superfly/flyctl-actions/setup-flyctl@master
#
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - uses: actions/download-artifact@v4
#        with:
#          # No name: download everything
#          path: tiles
#          merge-multiple: true
#
#      - name: List generated tiles
#        run: |
#          ls -lah tiles/
#
#      - name: Deploy
#        env:
#          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
#        run: |
#          flyctl deploy --config martin-static.fly.toml --local-only

  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest
    environment: api-production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull database
        run: |
          docker compose pull db
          docker compose up --no-build --pull never --wait db

      - name: Prepare data
        run: |
          docker compose exec -T db psql \
            --host 127.0.0.1 \
            --user postgres \
            --port 5432 \
            --dbname gis \
            < api/prepare_facilities.sql
          
          docker compose exec -T db psql \
            --host 127.0.0.1 \
            --user postgres \
            --port 5432 \
            --dbname gis \
            < api/prepare_milestones.sql

      - name: Extract data from database
        run: |
          docker compose exec db pg_dump \
            --host 127.0.0.1 \
            --user postgres \
            --port 5432 \
            --dbname gis \
            --table openrailwaymap_facilities_for_search \
            --table openrailwaymap_ref \
            --table openrailwaymap_milestones \
            --table openrailwaymap_tracks_with_ref \
            > api/api.sql

      - name: Build container
        run: |
          docker compose up --build --wait api-import
          
          docker compose stop api-import
          
          DB_CONTAINER_ID="$(docker compose ps --all --format json | jq -r 'select(.Service == "api-import") | .ID')"
          DB_IMAGE="$(docker compose ps --all --format json | jq -r 'select(.Service == "api-import") | .Image')"
          
          # Persist and squash data in new image
          docker cp "$DB_CONTAINER_ID:/var/lib/postgresql/postgres-data" api/postgres-data
          
          docker compose build api
          docker compose push api

      - name: Print import logs
        if: ${{ always() }}
        run: |
          docker compose logs api-import

      - name: Deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --config api.fly.toml --local-only api
